To use this slackbuild to install go1.5.1, follow these steps:

1) Install go1.4.3 using the slackbuild at http://slackbuilds.org

2) check out this git repo, and download go1.5.1.src.tar.gz from
   https://storage.googleapis.com/golang/go1.5.1.src.tar.gz

3) Use this slackbuild script to create a go1.5.1 slackware package

4) Remove your existing go1.4.1 slackware package

5) Install your new go1.5.1 package

This is a copy of the golang slackbuild I downloaded from
http://slackbuilds.org in November 2015, which at that time was for go1.4.3.
It is very much not my own work.

I have made only minor changes to the slackbuild script, to make it possible
to run go1.5.1. Building go1.5.1 from source requires a bootstrap go compiler,
so I used the one provided by the previous version of this slackbuild script
(which I happened to already have installed).

The original README is below.
=================================================================

The Go programming language is an open source project to make programmers more
productive. Go is expressive, concise, clean, and efficient. Its concurrency
mechanisms make it easy to write programs that get the most out of multicore and
networked machines, while its novel type system enables flexible and modular
program construction. Go compiles quickly to machine code yet has the
convenience of garbage collection and the power of run-time reflection. It's a
fast, statically typed, compiled language that feels like a dynamically typed,
interpreted language.

The tools are added to the path by putting go.sh and go.csh files in
/etc/profile.d and letting the system's /etc/profile or /etc/csh.login pick it
up.  If you want to add any of Go's environment variables you can add them
there.

Also, to easily setup a user-independent path for Go libraries to be installed
to and used, is the GOPATH environment variable. This variable can be colon
delimited. For example, once installing the built google-go-lang package, then
set in your user's ~/.bashrc something like:

  export GOPATH="$HOME/src/go"

Then, you'll be able to use the `go` command to install an additional library
that will not need root permission and will be in the compiler's path.
Like so:

  go get labix.org/v2/mgo

Now in ~/src/go, you'll have this library available!

Since the golang idiom is very `go get'able as a limited user, installed
libraries from slackbuilds.org are located outside of GOROOT (which is only for
golang standard library), in /usr/share/gocode
By not setting a system-wide GOPATH defaulting to this location, then it is up
to the user of whether to include this system path as well, like:

  export GOPATH="$HOME/src/go:/usr/share/gocode"

This system source directory is primarly only for buildtime of slackbuilds.

This is because `go get' iterates through the paths provided, looking for
matching imports. If a match is not found, then is cloned to the first path
provided.  You would not want this to be a system path, as to need root
privilege to clone source.

As of go1.2, the 'go doc ...' command has been relocated to the go.tools
library (golang-googlecode-gotools), which provide `godoc`.


To elect to run the buildtime tests of this package, provide the environment
variable RUN_TEST=true at build time.
